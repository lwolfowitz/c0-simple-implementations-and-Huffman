/* The pixel type and an interface to pixels */

typedef int pixel;

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ ensures \result >= 0 && \result <= 255;
{
pixel i = p>>16;
  return (i & 0x000000FF); // NOTE: you need to edit this line
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ ensures \result >= 0 && \result <= 255;
{
pixel i = p & 0x0000FF00;
  return (i>>8); // NOTE: you need to edit this line
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
{
pixel i = p & 0x000000FF;
  return (i); // NOTE: you need to edit this line
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ ensures \result >= 0 && \result <= 255;
{
pixel i = p & 0xFF000000;
  return (i>>24); // NOTE: you need to edit this line
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@ requires \alpha >= 0 && \alpha <= 255;
//@ requires \red >= 0 && \red <= 255;
//@ requires \green >= 0 && \green <= 255;
//@ requires \blue >= 0 && \blue <= 255;
{
alpha = alpha<<24;
red = red<<16;
green = green<<8;
int i =  alpha | red | green | blue;
  return i; // NOTE: you need to edit this line
}