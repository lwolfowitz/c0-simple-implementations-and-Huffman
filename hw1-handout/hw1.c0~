/* The file pixel.c0 describes the pixel type. It also defines the
 * pixel interface with five functions: get_red(p), get_green(p),
 * get_blue(p), get_alpha(p), and make_pixel(a,r,g,b).
 *
 * For the implementation that you just wrote, we're going to check that
 * you represent pixels as integers where the bits describe the alpha
 * value, red intensity, green intensity, and blue intensity (in that
 * order). However, to *use* this implementation, you can just use the
 * functions make_pixel, get_red, get_green, etc., without thinking
 * about whether the pixels are represented by integers, or whether the
 * blue component is the second byte of the integer, etc.  This makes
 * subsequent code much easier to write, because you don't need to keep
 * these low-level details in your head.
 * 
 * Thus, when writing this file, you should only use the interface of
 * pixels.c0. We'll check your code by compiling and running it against
 * different implementations of the pixel interface.
 *
 * There are 3 tasks in this file:
 *  - 4 - Respecting interfaces 
 *  - 5 - Implement quantize() as described in the writeup
 *  - 6 - Testing quantize()
 */

/* Task 4 - Respecting interfaces
 *
 * This implementation of the remove_red() function takes a pixel and
 * return a pixel with red intensity 0 and with other intensities
 * unchanged. It does not currently respect the interface to pixels:
 * change it so that it does. */

pixel remove_red(pixel p) {
  return 0xFF00FFFF & p;
}

/* This is some code for testing the remove_red() function. It *does*
 * respect the pixel interface. You can use it to test your
 * implementation and, if you want, extend it with your own tests, but
 * we won't run this test code in the autograder. */

bool remove_red_works(pixel p1) {
  pixel p2 = remove_red(p1);
  if (get_alpha(p2) != get_alpha(p1)) return false;
  if (get_red(p2)   != 0)             return false;
  if (get_green(p2) != get_green(p1)) return false;
  if (get_blue(p2)  != get_blue(p1))  return false;
  return true;
}

void test_remove_red() {
  assert(remove_red_works(make_pixel(0xFF, 0x01, 0x03, 0x04)));
  assert(remove_red_works(make_pixel(0x02, 0x00, 0xFF, 0xEE)));
  assert(remove_red_works(make_pixel(0xFF, 0xFF, 0xFF, 0xFF)));
  assert(remove_red_works(make_pixel(0x00, 0x00, 0x00, 0x00)));
  assert(remove_red_works(make_pixel(0x00, 0xAA, 0xBB, 0xCC)));
}

/* Task 5 - Implement quantize() as described in the writeup */

pixel quantize(pixel p, int q) 
//@requires 0 <= q && q < 8;
{
  return p;   // NOTE: you need to edit this line!
}

/* Task 6 - Testing quantize()
 *
 * Write some more tests for quantize. Remember to respect the pixels
 * interface! We *will* run these tests, and will grade them based on
 * their ability to catch buggy implementations of quantize. */

void test_quantize() {
  pixel p = quantize(make_pixel(0xFF, 0xFF, 0xFF, 0xFF), 4);
  assert(get_alpha(p) == 0xFF);
  assert(get_red(p)   == 0xF0);
  assert(get_green(p) == 0xF0);
  assert(get_blue(p)  == 0xF0);
}

