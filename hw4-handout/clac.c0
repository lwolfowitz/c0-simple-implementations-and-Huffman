/*
 * Clac, stack-based calculator language
 *
 * Principles of Imperative Computation
 */

#use <string>
#use <parse>
#use <conio>
#use <args>
#use <util>

/* Return true: clac top-level interpreter will expect more input */
/* Return false: clac top-level interpreter will exit */
bool eval(queue Q, stack S)
//@ensures \result == false || queue_empty(Q);
{
  while (!queue_empty(Q)) {
    // get the current operation
    string op = deq(Q); 

    // you can uncomment this line to have clac print each operation
    // as you process it.  
    // print("Read: "); print(op); print("\n");

    if (string_equal(op, "print")) {

      /* FIXME: next line is unsafe and should be fixed */
      int x = pop(S);
      printint(x); print("\n");

    } 

else if (string_equal(op, "quit")) {

      // we've written the case for quit for you
      // you don't need to change this code.  

      return false; /* do not continue */

    } 
else if (string_equal(op, "+")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
int a = x + y;
push(S, a);
}
else if (string_equal(op, "-")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
int a = x - y;
push(S, a);
}
else if (string_equal(op, "*")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
int a = x * y;
push(S, a);
}
else if (string_equal(op, "/")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (y == 0) {error("You cannot divide by zero");}
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
if  (x == int_min() && y == -1) {error("Overflow");}
int a = x / y;
push(S, a);
}
else if (string_equal(op, "%")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (y == 0) {error("This operation cannot be performed");}
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
if  (x == int_min() && y == -1) {error("Overflow");}
int a = x % y;
push(S, a);
}
else if (string_equal(op, "<")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
int a = 1;
int b = 0;
if (x < y) {push(S, a);}
if (x >= y) {push(S, b);}
}
else if (string_equal(op, ">")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
int a = 1;
int b = 0;
if (x > y) {push(S, a);}
if (x <= y) {push(S, b);}
}
else if (string_equal(op, "drop")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
pop(S);
}
else if (string_equal(op, "swap")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
push(S, y);
push(S, x);
}
else if (string_equal(op, "dup")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
push(S, y);
push(S, y);
}
else if (string_equal(op, "rot")) {
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int y = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int x = pop(S);
if (stack_empty(S)) {error ("Not enough arguments on the stack");}
int z = pop(S);
push(S, x);
push(S, y);
push(S, z);
}
else {

      // we've written the case for numbers for you
      // you don't need to change this code.  

      /* not defined as an operation name, should be an int */
      int* p = parse_int(op, 10);
      if (p == NULL) { /* not an int */
        /* call error(msg) which prints msg and aborts */
        error(string_join("undefined operation ", op));
      }
      push(S, *p);

    }
  }
  return true;                  /* continue */
}
